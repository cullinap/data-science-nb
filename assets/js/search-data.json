{
  
    
        "post0": {
            "title": "Title",
            "content": "Non-Negative Matrix Factorization . Non-negative Matrix Factorization (NMF) is a matrix factorization technique that has uses in natural language processing, recommender systems, genetics, and other domains. NMF works by approximating an input matrix with two other smaller matrices called factor W and H. . If $V$ in the input matrix, NMF seeks to find $W$ and $H$ such that $V approx WH$. In this approximation process $W$ and $H$ must be non-negative and one dimension from each matrix $k$ will be established ahead of time. . The resulting dimensions of the algorithm will be such: . input: $V in^{nxm} $ output: $H in { rm I !R}^{kxm}$ and $W in { rm I !R} ^{nxk}$ . In the case of topic modeling input $V$ would be a document-term matrix where dimensions $n x m$ would be equivalent to documents and terms respectively. The $k$ dimension would be the number of clusters you determine ahead of time. . A paper entitled &quot;Algorithms for Non-negative Matrix Factorization&quot; by Lee and Seung introduced a method to solve this problem using multiplicative algorithms. . In the code below we will step through the algorithm using a small matrix of random values to show how we can solve this problem using multiplicative update. . The algorithm can broken into two basic parts, prediction and error measurement. The alogrithm starts off by creating two random matrices with the dimensions we desire and makes a prediction. It then takes that prediction and measures it against the input to find how close that guess was. If our guess was close enough to the answer the algorithm stops and returns the two matrices that when multiply come close enough to our input. If the error is above our threshold it will loop through again, update the guess and try to get a little closer on the next iteration. We can establish ahead of time how many &quot;guesses&quot; the algorithm can take by setting max iterations. . The Algorithm . We start off by generating our target matrix $V$. In real-world use cases this would be your document-term matrix or a matrix of images. . import random import numpy as np V = np.random.rand(5,5); V . array([[0.52142698, 0.61715405, 0.85269285, 0.7216024 , 0.22255575], [0.4164208 , 0.64619605, 0.97472937, 0.00334586, 0.92235833], [0.12443351, 0.63216622, 0.24411527, 0.79399003, 0.95376448], [0.96640626, 0.55492143, 0.43466789, 0.68585392, 0.81442501], [0.34213085, 0.34744151, 0.17180828, 0.97618289, 0.89745677]]) . To initiate the algorithm we fill the matrices with random numbers which we will soon update. Factor $W$ will have the dimension $nxk$ and $H$ will have the dimension $kxm$. . To keep things simple we will use a k value of 3. One of the decision you make prior to decomposing your input matrix is the rank of matrices of that will approximate it. Factor $W$ &amp; $K$ will have this $k$ value as a dimension. . # create matrix W k = 3 W = np.random.rand(V.shape[0], k); W . array([[0.6298243 , 0.42676458, 0.56225968], [0.81288485, 0.78283431, 0.19474575], [0.40726168, 0.3849017 , 0.85837444], [0.97692879, 0.17577736, 0.19055122], [0.48738989, 0.64414879, 0.83538579]]) . # create matrix H H = np.random.rand(k, V.shape[1]); H . array([[0.24091399, 0.8052402 , 0.45386546, 0.31473816, 0.77594193], [0.7435351 , 0.93153323, 0.56875252, 0.1645829 , 0.79815081], [0.52025911, 0.87431377, 0.52447758, 0.84346597, 0.46510706]]) . As we jump into our first iteration we have to define some parameters so our algorithm knows when to stop . When the limit (init_limit) is less than the error we stop the algorithm, and epsilon is a very small number that we use in our multiplicative update rules to keep the matrices positive. . error = 1e-6 # when the limit is less than the error we stop the algorithm init_limit = 1e9 # start with a big error and slowly wittle it away eps = 1e-7 # epsilon keeps the matrices positive . Now we are ready to take our randomly generated factors H &amp; W and feed them into our multiplicative update formula. The formula differs for each factor. . H *= ((W.T.dot(V) + eps) / (W.T.dot(W).dot(H) + eps)); H . array([[0.1769291 , 0.32543888, 0.32092189, 0.27038211, 0.514692 ], [0.35287573, 0.33842039, 0.36882068, 0.12434339, 0.52235002], [0.21868777, 0.31058734, 0.24624031, 0.77617435, 0.31329617]]) . W *= ((V.dot(H.T) + eps) / (W.dot(H.dot(H.T)) + eps)); W . array([[0.58158347, 0.4074247 , 0.5811519 ], [0.83068364, 0.85491908, 0.14938989], [0.42464564, 0.3808956 , 0.84150784], [1.36952829, 0.26431136, 0.28907238], [0.40217643, 0.49438314, 0.76097884]]) . Now we need to measure the distance between the product of $W*H$ and our original matrix $V$. This is where we obtain our variable lim. . In this equation we are using the Frobenius norm in this form: $||V - WH||_F$. The frobenius norm is a matrix norm, that takes the absolute value of each element, squares it, sums all the elements, and then takes the square root of that matrix. We are using it in this equation as the cost function. As $W$ &amp; $H$ are updated in each iteration they are multiplied together and subtracted from $V$. The resulting matrix is then the input to the frobenius norm. We name the output of this step the variable limit. When this lim value is less than our error that we set above, we stop the calculation. If it is not we rename it init_limit and go back to the beginning of the algorithm. . Numpy has a method called linalg.norm which makes it convinent to calculate the frobienius norm. for us: . limit = np.linalg.norm(V-W.dot(H), &#39;fro&#39;) limit . 1.2447376059072528 . if abs(init_limit - limit) &lt; error: print(&#39;tolerance met&#39;) else: print(&#39;limit &gt; error&#39;) . limit &gt; error . We are now done with all our steps in the alogorithm, and what is left is to put this all in a loop. . def nmf(V, error=1e-6, max_iter=5000, k=3): H = np.random.rand(k, V.shape[1]) W = np.random.rand(V.shape[0], k) limit_data = [] init_limit = 1e9 eps = 1e-7 for i in range(max_iter): H *= ((W.T.dot(V) + eps) / (W.T.dot(W).dot(H) + eps)) W *= ((V.dot(H.T) + eps) / (W.dot(H.dot(H.T)) + eps)) limit = np.linalg.norm(V-W.dot(H), &#39;fro&#39;) if abs(init_limit - limit) &lt; error: break init_limit = limit limit_data.append(limit) return W,H, limit_data . Let&#39;s do a test run with new random data to show how it works . # create a 5x5 matrix with random values V = np.random.rand(5,5) W,H,lim_data = nmf(V) . In the graph below we can see that over the decrease in the limit value over iterations and eventually stopping at around ~170ish. . import matplotlib.pyplot as plt plt.figure(figsize=(10,5)) plt.title(&quot;Model Error (V - WH) per Iteration&quot;) plt.plot(lim_data) plt.show() . References: -https://www.youtube.com/watch?v=kfEWZA-b-YQ -&quot;Algorithms for Non-negative Matrix Factorization&quot;: Lee &amp; Seung 2001 .",
            "url": "https://cullinap.github.io/data-science-nb/2020/09/19/non-negative-matrix-factorization.html",
            "relUrl": "/2020/09/19/non-negative-matrix-factorization.html",
            "date": " • Sep 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import matplotlib.pyplot as plt import numpy as np . def create_array(n): l = [int(x) for x in np.zeros(n)] m = n//2 l[m] = 1 return l def add_array(arr): i = 0 new_array= [] for i in range(len(arr)): if i == len(arr) - 1: new_array.append(0) break elif arr[i-1] == 0 and arr[i] == 0 and arr[i+1] == 0: #000 new_array.append(0) elif arr[i-1] == 0 and arr[i] == 0 and arr[i+1] == 1: #001 new_array.append(1) elif arr[i-1] == 0 and arr[i] == 1 and arr[i+1] == 0: #010 new_array.append(1) elif arr[i-1] == 0 and arr[i] == 1 and arr[i+1] == 1: #011 new_array.append(1) elif arr[i-1] == 1 and arr[i] == 0 and arr[i+1] == 0: #100 new_array.append(1) elif arr[i-1] == 1 and arr[i] == 0 and arr[i+1] == 1: #101 new_array.append(0) elif arr[i-1] == 1 and arr[i] == 1 and arr[i+1] == 0: #110 new_array.append(0) elif arr[i-1] == 1 and arr[i] == 1 and arr[i+1] == 1: #111 new_array.append(0) return new_array . init_arr = create_array(500) a = [] x = [] for i in range(250): if i == 0: a.append(init_arr) elif i == 1: x = add_array(init_arr) a.append(x) elif i &gt;= 1: x = add_array(x) a.append(x) y=np.array([np.array(xi) for xi in a]) plt.figure(figsize = (20,40)) plt.imshow(y, interpolation=&#39;nearest&#39;) plt.show() .",
            "url": "https://cullinap.github.io/data-science-nb/2020/08/29/rule-30.html",
            "relUrl": "/2020/08/29/rule-30.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cullinap.github.io/data-science-nb/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cullinap.github.io/data-science-nb/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://cullinap.github.io/data-science-nb/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cullinap.github.io/data-science-nb/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}